#! /usr/bin/env python3

from argparse import ArgumentParser
from subprocess import Popen, call, check_output
from itertools import permutations
from collections import defaultdict
import csv

parser = ArgumentParser(description="Compare many binaries to each other",)
parser.add_argument('-f', '--file', help="File listing binaries, one per line")
parser.add_argument('-o', '--output', help="The base filename for the outputs")
parser.add_argument('-n', '--number', help="The n value for n-grams")

args = parser.parse_args()

input_file = open(args.file, "r")
n = args.number
output_file = open(args.output+"."+n+".csv", "w")
file_list = list()

grams = list()
files = list()

# Read through the input file and run each binary through the n-gram program
for line in input_file:
    line = line.strip()
    # Run through n-gram parser
    out_name = line+"."+n+"gram"
    cmd = ["./n_grams_bytes.py", "-n", n, "-o", out_name, line]
    call(cmd)
    grams.append(out_name)
    files.append(out_name)
input_file.close()

table = defaultdict(dict)
#Now, run each binary against every other binary
for first, second in permutations(grams, 2):
    cmd = ["./compare_cluster.py", "-f", first, "-s", second]
    output = float(check_output(cmd))
    table[first][second] = output
    table[first][first] = 1.0

cw = csv.writer(output_file)
files.insert(0, "")
#Write the header to the file
cw.writerow(files)
del files[0]

#Go through the table and print out the cosine scores to fit a table.
print(table)
print(files)
for key in files:
    line = list()
    line.append(key)
    for item in files:
        print("%s, %s" % (key, item))
        line.append(table[key][item])
    cw.writerow(line)
